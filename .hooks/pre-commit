#!/usr/bin/env python3

import os
import sys
import subprocess
from typing import List, Set, Tuple
from pathlib import Path
from dataclasses import dataclass
from enum import Enum
from PIL import Image


class Color:
    """ANSI color codes for terminal output"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RESET = '\033[0m'


class FileStatus(Enum):
    """Enum for file validation status"""
    ALLOWED = "allowed"
    BLOCKED = "blocked"
    IGNORED = "ignored"


@dataclass
class FileValidation:
    """Data class to store file validation results"""
    path: str
    status: FileStatus
    message: str


class ImageHook:
    """Pre-commit hook for managing image file extensions"""

    def __init__(self):
        self.violations: List[FileValidation] = []
        self.allowed_files: List[FileValidation] = []

    def get_staged_files(self) -> List[str]:
        """Get list of staged files from git"""
        try:
            result = subprocess.run(
                ['git', 'diff', '--cached', '--name-only', '--diff-filter=ACMR'],
                capture_output=True,
                text=True,
                check=True
            )
            return [file for file in result.stdout.splitlines() if file.strip()]
        except subprocess.CalledProcessError as e:
            print(f"{Color.RED}Error getting staged files: {e}{Color.RESET}")
            sys.exit(1)

    def convert_to_jpg(self, file_path: str):
        extension = Path(file_path).suffix.lower().lstrip('.')
        if extension != 'jpg':
            new_path = str(Path(file_path).with_suffix('.jpg'))
            try:
                img = Image.open(file_path).convert('RGB')
                img.save(new_path, 'JPEG')
                subprocess.run(['git', 'add', new_path], check=True)
                subprocess.run(
                    ['git', 'rm', '--cached', file_path], check=True)
                Path(file_path).unlink()
                self.allowed_files.append(FileValidation(
                    new_path, FileStatus.ALLOWED, 'Converted to jpg'))
            except Exception as e:
                print(f"Error converting {file_path} to JPG: {str(e)}")

    def validate_file(self, file_path: str) -> FileValidation:
        extension = Path(file_path).suffix.lower().lstrip('.')
        image_exts = {"jpg", "png", "gif", "bmp",
                      "jpeg", "webp", "svg", "ico", "tiff", "avif"}
        if extension not in image_exts:
            return FileValidation(file_path, FileStatus.IGNORED, "Not an image file")
        if file_path.startswith("wallpapers/") or file_path.startswith("covers/"):
            if extension != "jpg":
                return FileValidation(file_path, FileStatus.ALLOWED, "Convert non-jpg in wallpapers/covers")
            return FileValidation(file_path, FileStatus.IGNORED, "Already .jpg in wallpapers/covers")
        return FileValidation(file_path, FileStatus.IGNORED, "Outside wallpapers/covers")

    def print_results(self):
        """Print validation results with color formatting"""
        # Print blocked files first
        for violation in self.violations:
            print(f"{Color.RED}✖ {violation.message}: {
                  violation.path}{Color.RESET}")

        # Print allowed files
        for allowed in self.allowed_files:
            print(f"{Color.GREEN}✓ {allowed.message}: {
                  allowed.path}{Color.RESET}")

        # Print summary if there were violations
        if self.violations:
            print(f"\n{Color.RED}✖ Commit failed: Found {
                  len(self.violations)} illegal image file(s){Color.RESET}")
            print(
                f"{Color.YELLOW}Note: Only .jpg files are allowed in /wallpapers and /covers directories{Color.RESET}")

    def run(self) -> bool:
        """Run the hook validation"""
        staged_files = self.get_staged_files()

        for file_path in staged_files:
            validation = self.validate_file(file_path)

            if validation.status == FileStatus.ALLOWED:
                self.convert_to_jpg(file_path)

        return True


def main():
    """Main entry point"""
    try:
        hook = ImageHook()
        success = hook.run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print(f"\n{Color.YELLOW}Hook interrupted by user{Color.RESET}")
        sys.exit(1)
    except Exception as e:
        print(f"{Color.RED}Error running hook: {str(e)}{Color.RESET}")
        sys.exit(1)


if __name__ == "__main__":
    main()
